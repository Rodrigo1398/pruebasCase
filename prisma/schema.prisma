// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Role {
  id    Int     @id @default(autoincrement())
  tipo  String
  state Boolean @default(true)

  User User[]
}

// Auth.js
model Account {
  id                       String  @id @default(uuid())
  userId                   String
  type                     String
  provider                 String
  providerAccountId        String
  refresh_token            String? @db.Text
  refresh_token_expires_in Int?
  access_token             String? @db.Text
  expires_at               Int?
  token_type               String?
  scope                    String?
  id_token                 String? @db.Text
  session_state            String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(uuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(uuid())
  name          String?
  password      String?
  roles         String[]  @default(["user"])
  isActive      Boolean   @default(true)
  email         String?   @unique
  emailVerified DateTime?
  image         String?

  //Relaciones

  accounts Account[]
  sessions Session[]
  role     Role?     @relation(fields: [roleId], references: [id])
  roleId   Int?      @default(1)
  Address  Address[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Address {
  id    String  @id @default(uuid())
  lat   String
  lon   String
  state Boolean @default(true)

  //Relaciones

  user   User   @relation(fields: [userId], references: [id])
  userId String
}

model Category {
  id      String    @id @default(uuid())
  name    String
  state   Boolean   @default(true)
  Product Product[]
}

model Product {
  id    String  @id @default(uuid())
  slug  String
  title String
  price Float   @default(0)
  state Boolean @default(true)

  //Relaciones

  category   Category @relation(fields: [categoryId], references: [id])
  categoryId String
}
